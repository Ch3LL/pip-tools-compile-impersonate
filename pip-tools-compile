#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
    pip-tools-compile
    ~~~~~~~~~~~~~~~~~

    Wrapper around pip-tools to "impersonate" different distributions when compiling requirements
'''

# Import Python Libs
from __future__ import absolute_import, print_function
import os
import re
import sys
import atexit
import shutil
import logging
import argparse
import platform
import tempfile
import textwrap
import functools
import traceback
from collections import namedtuple
try:
    from unittest import mock
except ImportError:
    import mock

CAPTURE_OUTPUT = os.environ.get('CAPTURE_OUTPUT', '1') == '1'

# Import 3rd-party Libs
import six

LOG_STREAM = six.StringIO()
logging.basicConfig(
    level=logging.DEBUG,
    stream=LOG_STREAM,
    datefmt='%H:%M:%S',
    format='%(asctime)s,%(msecs)03.0f [%(name)-5s:%(lineno)-4d][%(levelname)-8s] %(message)s')

# Import pip-tools Libs
# piptools.io needs to be imported early or once piptools imports it it might "think" it's on windows
# when it's actually on Linux which will cause FS IO issue
import piptools.io
# Keep a reference to the original DependencyCache class
from piptools.cache import DependencyCache

# Import pip libs
# Let's import get_supported because we need the returned value from the un-mocked function
from pip._internal.pep425tags import get_supported


log = logging.getLogger(os.path.basename(__file__))

version_info = namedtuple('version_info', ['major', 'minor', 'micro', 'releaselevel', 'serial'])


class ImpersonateSystem(object):

    __slots__ = ('_python_version_info')

    def __init__(self, python_version_info, platform):
        parts = [int(part) for part in python_version_info.split('.') if part.isdigit()]
        python_version_info = list(sys.version_info)
        for idx, part in enumerate(parts):
            python_version_info[idx] = part
        python_version_info = version_info(*python_version_info)
        self._python_version_info = python_version_info
        self._platform = platform

    def get_mocks(self):
        yield mock.patch('piptools.resolver.DependencyCache',
                         wraps=functools.partial(tweak_piptools_depcache_filename,
                                                 self._python_version_info,
                                                 self._platform))
        yield mock.patch('pip._internal.pep425tags.get_impl_version_info',
                         return_value=self._python_version_info[:2])
        yield mock.patch('pip._internal.utils.packaging.sys.version_info',
                         new_callable=mock.PropertyMock(return_value=self._python_version_info))
        yield mock.patch('pip._vendor.packaging.markers.platform.python_version',
                         return_value='{}.{}.{}'.format(*self._python_version_info))

    def __enter__(self):
        for mock_obj in self.get_mocks():
            mock_obj.start()
        return self

    def __exit__(self, *args):
        mock.patch.stopall()


def tweak_piptools_depcache_filename(version_info, platform, *args, **kwargs):
    depcache = DependencyCache(*args, **kwargs)
    cache_file = os.path.join(os.path.dirname(depcache._cache_file),
                              'depcache-{}-py{}.{}.json'.format(platform, *version_info))
    log.info('Tweaking the pip-tools depcache file to: %s', cache_file)
    depcache._cache_file = cache_file
    return depcache


def get_supported_with_fixed_unicode_width(*args, **kwargs):
    supported = get_supported(*args, **kwargs)
    for version, abi, arch in supported[:]:
        if abi.endswith('u'):
            supported.append((version, abi[:-1], arch))
    return supported


class ImpersonateWindows(ImpersonateSystem):

    def get_mocks(self):
        for entry in super(ImpersonateWindows, self).get_mocks():
            yield entry
        # We don't want pip trying query python's internals, it knows how to mock that internal information
        yield mock.patch('pip._internal.pep425tags.get_config_var', return_value=None)
        # Impersonate Windows 32
        yield mock.patch('pip._internal.pep425tags.get_platform', return_value='win32')
        # Wrap get_supported in out own function call to fix unicode width issues
        yield mock.patch('pip._internal.pep425tags.get_supported', wraps=get_supported_with_fixed_unicode_width)
        yield mock.patch('pip._internal.index.get_supported', wraps=get_supported_with_fixed_unicode_width)
        # Patch pip's vendored packaging markers
        yield mock.patch('pip._vendor.packaging.markers.os.name', new_callable=mock.PropertyMock(return_value='nt'))
        yield mock.patch('pip._vendor.packaging.markers.sys.platform', new_callable=mock.PropertyMock(return_value='win32'))
        yield mock.patch('pip._vendor.packaging.markers.platform.machine', return_value='AMD64')
        yield mock.patch('pip._vendor.packaging.markers.platform.release', return_value='8.1')
        yield mock.patch('pip._vendor.packaging.markers.platform.system', return_value='Windows')
        yield mock.patch('pip._vendor.packaging.markers.platform.version', return_value='6.3.9600')


class ImpersonateDarwin(ImpersonateSystem):

    def get_mocks(self):
        for entry in super(ImpersonateDarwin, self).get_mocks():
            yield entry
        # We don't want pip trying query python's internals, it knows how to mock that internal information
        yield mock.patch('pip._internal.pep425tags.get_config_var', return_value=None)
        # Impersonate Windows 32
        yield mock.patch('pip._internal.pep425tags.get_platform', return_value='darwin')
        # Wrap get_supported in out own function call to fix unicode width issues
        yield mock.patch('pip._internal.pep425tags.get_supported', wraps=get_supported_with_fixed_unicode_width)
        yield mock.patch('pip._internal.index.get_supported', wraps=get_supported_with_fixed_unicode_width)
        # Patch pip's vendored packaging markers
        yield mock.patch('pip._vendor.packaging.markers.os.name', new_callable=mock.PropertyMock(return_value='posix'))
        yield mock.patch('pip._vendor.packaging.markers.sys.platform', new_callable=mock.PropertyMock(return_value='darwin'))
        yield mock.patch('pip._vendor.packaging.markers.platform.machine', return_value='x86_64')
        yield mock.patch('pip._vendor.packaging.markers.platform.release', return_value='18.5.0')
        yield mock.patch('pip._vendor.packaging.markers.platform.system', return_value='Darwin')
        yield mock.patch('pip._vendor.packaging.markers.platform.version',
                         return_value='Darwin Kernel Version 18.5.0: Mon Mar 11 20:40:32 PDT 2019; root:xnu-4903.251.3~3/RELEASE_X86_64')
        yield mock.patch('pip._vendor.packaging.markers.platform.python_version', return_value='{}.{}.{}'.format(*self._python_version_info))


class ImpersonateLinux(ImpersonateSystem):

    def get_mocks(self):
        for entry in super(ImpersonateLinux, self).get_mocks():
            yield entry
        # We don't want pip trying query python's internals, it knows how to mock that internal information
        yield mock.patch('pip._internal.pep425tags.get_config_var', return_value=None)
        # Impersonate Windows 32
        yield mock.patch('pip._internal.pep425tags.get_platform', return_value='linux2')
        # Wrap get_supported in out own function call to fix unicode width issues
        yield mock.patch('pip._internal.pep425tags.get_supported', wraps=get_supported_with_fixed_unicode_width)
        yield mock.patch('pip._internal.index.get_supported', wraps=get_supported_with_fixed_unicode_width)
        # Patch pip's vendored packaging markers
        yield mock.patch('pip._vendor.packaging.markers.sys.platform',
                new_callable=mock.PropertyMock(return_value='linux{}'.format('2' if self._python_version_info[0] == 2 else '')))
        yield mock.patch('pip._vendor.packaging.markers.os.name', new_callable=mock.PropertyMock(return_value='posix'))
        yield mock.patch('pip._vendor.packaging.markers.platform.machine', return_value='x86_64')
        yield mock.patch('pip._vendor.packaging.markers.platform.release', return_value='4.19.29-1-lts')
        yield mock.patch('pip._vendor.packaging.markers.platform.system', return_value='Linux')
        yield mock.patch('pip._vendor.packaging.markers.platform.version', return_value='#1 SMP Thu Mar 14 15:39:08 CET 2019')
        yield mock.patch('pip._vendor.packaging.markers.platform.python_version', return_value='{}.{}.{}'.format(*self._python_version_info))



class CatureSTDs(object):

    def __init__(self):
        self._stdout = six.StringIO()
        self._stderr = six.StringIO()
        self._sys_stdout = sys.stdout
        self._sys_stderr = sys.stderr

    def __enter__(self):
        sys.stdout = self._stdout
        sys.stderr = self._stderr
        return self

    def __exit__(self, *args):
        sys.stdout = self._sys_stdout
        sys.stderr = self._sys_stderr
        if not CAPTURE_OUTPUT:
            self._stdout.seek(0)
            sys.stdout.write(self._stdout.read())
            self._stderr.seek(0)
            sys.stderr.write(self._stderr.read())

    @property
    def stdout(self):
        self._stdout.seek(0)
        return self._stdout.read()

    @property
    def stderr(self):
        self._stdout.seek(0)
        return self._stdout.read()


def compile_requirement_file(source, dest, options, unknown_args):
    log.info('Compiling requirements to %s', dest)

    call_args = ['pip-compile', '-o', dest]
    if unknown_args:
        call_args += unknown_args
    if options.include:
        call_args += options.include
    call_args.append(source)

    original_sys_arg = sys.argv[:]
    try:
        print('Running: {}'.format(' '.join(call_args)))
        print('  Impersonating: {}'.format(options.platform))
        print('  Mocked Python Version: {}'.format(options.py_version))
        sys.argv = call_args[:]
        log.debug('Switching sys.argv to: %s', sys.argv)
        try:
            import piptools.scripts.compile
            piptools.scripts.compile.cli()
        except SystemExit as exc:
            if exc.code == 0:
                return True
            print('Exception raised when processing {}'.format(source))
            print(traceback.format_exc())
            return False
        except Exception:
            print('Exception raised when processing {}'.format(source))
            print(traceback.format_exc())
            return False
    finally:
        log.info('Finished compiling %s', dest)
        sys.argv = original_sys_arg

    # Flag success
    return True


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--platform',
        choices=('windows', 'darwin', 'linux'),
        default=platform.system().lower()
    )
    parser.add_argument('--py-version', default='{}.{}'.format(*sys.version_info))
    parser.add_argument('--include', action='append', default=[])
    parser.add_argument('--output-dir', default=None)
    parser.add_argument('--out-prefix', default=None)
    parser.add_argument(
        '--remove-line', default=[], action='append',
        help='Python regular experession to search and remove from the compiled requirements and remove it'
    )
    parser.add_argument('files', nargs='+')

    options, unknown_args = parser.parse_known_args()

    impersonations = {
        'darwin': ImpersonateDarwin,
        'windows': ImpersonateWindows,
        'linux': ImpersonateLinux
    }

    regexes = []
    for regex in options.remove_line:
        regexes.append(re.compile(regex))

    stdout = stderr = None
    exitcode = 0

    with CatureSTDs() as capstds:
        with impersonations[options.platform](options.py_version, options.platform):
            import piptools.scripts.compile
            for fpath in options.files:
                if not fpath.endswith('.in'):
                    continue

                # Return the log strem to 0, either to write a log file in case of an error,
                # or to overwrite the contents for this next fpath
                LOG_STREAM.seek(0)

                source_dir = os.path.dirname(fpath)
                if options.output_dir:
                    dest_dir = output_dir
                else:
                    dest_dir = os.path.join(source_dir, 'py{}'.format(options.py_version))
                if not os.path.isdir(dest_dir):
                    os.makedirs(dest_dir)
                outfile = os.path.basename(fpath).replace('.in', '.txt')
                if options.out_prefix:
                    outfile = '{}-{}'.format(options.out_prefix, outfile)
                outfile_path = os.path.join(dest_dir, outfile)
                if not compile_requirement_file(fpath, outfile_path, options, unknown_args):
                    exitcode = 1
                    error_logfile = outfile_path.replace('.txt', '.log')
                    with open(error_logfile, 'w') as wfh:
                        wfh.write(LOG_STREAM.read())
                        LOG_STREAM.seek(0)
                        print('Error log file at {}'.format(error_logfile))
                    continue

                if not regexes:
                    continue

                with open(outfile_path, 'r') as rfh:
                    in_contents = rfh.read()

                out_contents = []
                for line in in_contents.splitlines():
                    print('Processing line: {!r} // {}'.format(line, [r.pattern for r in regexes]))
                    for regex in regexes:
                        if regex.match(line):
                            print("Line commented out by regex '{}': '{}'".format(regex.pattern, line))
                            line = textwrap.dedent('''\
                                # Next line explicitly commented out by {} because of the following regex: '{}'
                                # {}'''.format(
                                    os.path.basename(__file__),
                                    regex.pattern,
                                    line
                                )
                            )
                            break
                    out_contents.append(line)

                with open(outfile_path, 'w') as wfh:
                    wfh.write(os.linesep.join(out_contents) + os.linesep)

            if exitcode:
                stdout = capstds.stdout
                stderr = capstds.stderr

    if stdout:
        sys.__stdout__.write(capstds.stdout)
    if stderr:
        sys.__stderr__.write(capstds.stderr)
    sys.exit(exitcode)


if __name__ == '__main__':
    main()
